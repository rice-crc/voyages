# This folder should contain auxiliary development tools.
# Each script/program under this folder should be documented in this README file.


==================================================================================
mapping tool(s)
==================================================================================



The graphical tool is here:
Voyages - Directed Network Design Tool (slavevoyages.org)
However there are some missing JS files and it is not rendering properly at the moment. It might be broken due to Doug's changes or something else (it has been a while since the tool was used last).

When properly working, it should allow exporting a Python file like this:
voyages/region_network.py at develop Â· rice-crc/voyages (github.com)
(Note that we have different files for Transatlantic and IntraAmerican)

There are other files in that folder and they basically represent the inbound and outbound regional "ocean" geo codes (see region_from.py and region_to.py). You can think of those regional geo codes as hubs. Now, to put it together, we have the following strategy:

    Each in/outbound port is matched to the nearest in/outbound region coordinate, a short, direct path is expected between the port coordinate and the region coordinate (this is why sometimes you see some path going over land in the case of island ports... it can be fixed by adding more regional coordinates).
    Our tool then precomputes all pairs of paths between any two hubs that are actually used by a voyage (so if there are N inbound and M outbound hubs there can be at most N*M different paths).
    In the front-end, the animation constructs the voyage path by a short direct path from inbound port to the hub, then followed by the hub-to-hub precomputed path, then another direct hub-to-outbound-port path. It also applies some small random perturbation to the dots navigating the path, so that the ships are a bit more spread out during their voyage.

Once the Python file is updated, the "smooth.py" script can be used to generate the .js file as documented here:
https://github.com/rice-crc/voyages/blob/13caccd48fdb711fdacf7ae81ca91a9a1138c4d9/tools/animation/smooth.py#L124

It's definitely not the most ergonomic workflow but it (used to) get the job done. If there is funding for this, we could spin off a project to rewrite these tools in a more user friendly/automatic way and open source it so others could use it as well.




==================================================================================
get_dumpdata_commands.sh
==================================================================================

This command simply generates a sequence of dumpdata commands that should be
run on the production server whenever the latest version of the data needs to
be placed into json fixtures for new deployments (e.g. to install the site on
a different server or create a new development version with a fresh copy
of the data).

==================================================================================
extract_trans.sh
==================================================================================
Performs a sweep of the translation log and produces a PO file for translation.

This app has a significant amount of dynamic content that is generated from text
in the database. The usual tools to extract web page content for translation in 
Django do not address this type of content and for this reason we developed an 
auxiliary tool for this task.

The first step is to use the voyages.apps.common.filter.trans_log filter, which
attempts to translate the passed string. If it cannot translate it, the string
is logged to the *trans* logger (see configuration below). The log file is populated
by visiting the pages of the site that require translation. After a thorough
visit is concluded, the log should list all original text which did not get
translated. The script extract_trans.sh can then be used to obtain a PO file 
which is suitable for the translation process.

Configuration
-------------

In localsettings.py:

LOGGING = {
    ..............
    'handlers': {
        ...........,
        'trans': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'trans.log',      <==== SPECIFY THE LOG FILE PATH HERE
            'formatter': 'basic'
        }
    },
    'loggers': {
        ...........,
        'trans': {
            'handlers': ['trans'],
            'level': 'INFO',
            'propagate': True,
        }
    }
}

Setting up translateable content
--------------------------------

A view variable can be translated and displayed as follows: {{ variable_name|trans_log }}.


Script Usage
------------

  $ sh extract_trans.sh path/to/trans.log path/to/output

NOTE: the .po extension is automatically added

The produced PO file can be then merged with the localized versions for
translation using msgcat (details are given after running this script).

# Maps

To generate the underlying directed network visit
{SERVER HTTP PATH}/static/maps/index.html
The tool has explanatory notes on how to visually design and inspect the network.

Once a route_nodes.js file is generated from the tool, it must replace the one
in {project local path}/sitemedia/maps/route_nodes.js

Warning
-------

The usual pipeline for working with PO files can sometimes comment out all translations
that are not obtained by a {% trans "text to translate" %} tag. If that happens, remember
that PO files are just plain text and use sed or a text editor to uncomment the entries
before compiling an MO file.

For more details, please check Django's doc files:
https://docs.djangoproject.com/en/1.10/topics/i18n/translation/
